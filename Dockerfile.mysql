# Dockerfile.mysql
# Multi-stage build for MySQL with New Relic Integration

# Stage 1: Build New Relic MySQL integration
FROM docker.io/library/golang:1.23-alpine AS builder

# Metadata and build arguments
LABEL maintainer="Your Organization" \
      description="MySQL 8.0 with New Relic Integration" \
      version="1.0.0"

# Set build-time arguments with defaults
ARG GO_VERSION=1.23
ARG NRI_MYSQL_REPO=https://github.com/newrelic/nri-mysql.git
ARG NRI_MYSQL_BRANCH=main

# Set working directory and environment
WORKDIR /app
ENV CGO_ENABLED=0 \
    GOOS=linux \
    GO111MODULE=on

# Install build dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata

# Clone and build New Relic MySQL integration
RUN git clone --depth 1 ${NRI_MYSQL_REPO} nri-mysql

# Set working directory for build
WORKDIR /app/nri-mysql

# Download and verify dependencies
RUN go mod download && \
    go mod verify

# Build the integration binary with hardening
RUN go build \
    -trimpath \
    -ldflags="-s -w -extldflags '-static'" \
    -o /app/nri-mysql/nri-mysql \
    ./src

# Stage 2: Final MySQL image with New Relic Integration
FROM docker.io/library/mysql:8.0-oracle

# Metadata
LABEL maintainer="Your Organization" \
      description="MySQL 8.0 with New Relic Integration" \
      version="1.0.0"

# Set build arguments for configuration
ARG MYSQL_ROOT_PASSWORD
ARG ENVIRONMENT=development
ARG CLUSTER_NAME=local

# Set environment variables
ENV MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} \
    ENVIRONMENT=${ENVIRONMENT} \
    CLUSTER_NAME=${CLUSTER_NAME} \
    NEWRELIC_LICENSE_KEY="" \
    VERBOSE=0

# Install necessary tools
RUN microdnf update -y && \
    microdnf install -y wget ca-certificates shadow-utils && \
    microdnf clean all && \
    rm -rf /var/cache/yum

# Prepare directories for NewRelic
RUN mkdir -p \
    /var/db/newrelic-infra/newrelic-integrations/bin \
    /etc/newrelic-infra/integrations.d \
    /var/log/mysql && \
    chown -R mysql:mysql \
    /var/db/newrelic-infra \
    /etc/newrelic-infra \
    /var/log/mysql && \
    chmod 750 \
    /var/db/newrelic-infra \
    /etc/newrelic-infra \
    /var/log/mysql

# Copy NewRelic configuration
COPY --chown=mysql:mysql configs/newrelic-infra.yml /etc/newrelic-infra.yml
COPY --chown=mysql:mysql configs/integrations.d/mysql-config.yml /etc/newrelic-infra/integrations.d/mysql-config.yml
COPY --chown=mysql:mysql configs/mysql/my.cnf /etc/mysql/my.cnf

# Copy database initialization scripts
COPY --chown=mysql:mysql employees-db/employees.sql /docker-entrypoint-initdb.d/employees.sql
COPY --chown=mysql:mysql employees-db/load_*.dump /docker-entrypoint-initdb.d/

# Copy New Relic MySQL integration binary
COPY --from=builder --chown=mysql:mysql /app/nri-mysql/nri-mysql /var/db/newrelic-infra/newrelic-integrations/bin/nri-mysql

# Copy entrypoint and make it executable
COPY --chown=mysql:mysql scripts/entrypoint.sh /entrypoint.sh
RUN chmod 550 /entrypoint.sh

# Set environment variables
ENV MYSQL_ALLOW_EMPTY_PASSWORD=yes

# Expose MySQL port
EXPOSE 3306/tcp

# Set entrypoint and default command
ENTRYPOINT ["/entrypoint.sh"]
CMD ["mysqld"]

# Run as non-root user
USER mysql

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s \
    CMD mysqladmin ping -h localhost -u root -p"$MYSQL_ROOT_PASSWORD" || exit 1
